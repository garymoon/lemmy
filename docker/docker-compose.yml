---

version: "3.3"

networks:
  # communication to web and clients
  lemmyexternalproxy:
  # communication between lemmy services
  lemmyinternal:
    driver: bridge
    internal: true

services:
  proxy:
    image: nginx:1
    # build:
    #   dockerfile_inline: |
    #     FROM nginx:1 as nginx
    #     FROM debian:12

    #     # https://github.com/nginxinc/docker-nginx-unprivileged/blob/main/stable/debian/Dockerfile
    #     RUN apt-get update && \
    #         apt-get install -qq -y nginx libnginx-mod-http-headers-more-filter && \
    #         rm -rf /var/lib/apt/lists/* && \
    #         rm -rf /etc/nginx && \
    #         ln -sf /dev/stderr /var/log/nginx/error.log && \
    #         ln -sf /dev/stdout /var/log/nginx/access.log

    #     COPY --from=nginx docker-entrypoint* /
    #     COPY --from=nginx /etc/nginx /etc/
    #     ENTRYPOINT ["/docker-entrypoint.sh"]
    #     CMD ["nginx", "-g", "daemon off;"]
    container_name: proxy
    networks:
      - lemmyinternal
      - lemmyexternalproxy
    ports:
      # actual and only port facing any connection from outside
      # Note, change the left number if port 1236 is already in use on your system
      # You could use port 80 if you won't use a reverse proxy
      - "127.0.0.1:1236:1236"
      - "127.0.0.1:8536:8536"
    volumes:
      - ./nginx.conf:/etc/nginx/templates/lemmy.conf.template:ro,Z
      - ./lemmy-error.html:/var/www/html/lemmy-error.html:ro,Z
    restart: unless-stopped
    depends_on:
      - pictrs
      - lemmy-ui
      - lemmy

  lemmy:
    hostname: lemmy
    container_name: lemmy
    networks:
      - lemmyinternal
      - lemmyexternalproxy
    restart: unless-stopped
    environment:
      - RUST_LOG="warn,lemmy_server=debug,lemmy_api=debug,lemmy_api_common=debug,lemmy_api_crud=debug,lemmy_apub=debug,lemmy_db_schema=debug,lemmy_db_views=debug,lemmy_db_views_actor=debug,lemmy_db_views_moderator=debug,lemmy_routes=debug,lemmy_utils=debug,lemmy_websocket=debug"
      - RUST_BACKTRACE=full
      - LEMMY_CONFIG_LOCATION=/config.hjson
    volumes:
      - ./lemmy.hjson:/config.hjson:Z
    depends_on:
      postgres:
        condition: service_healthy
      pictrs:
        condition: service_started

  lemmy-ui:
    container_name: lemmy-ui
    networks:
      - lemmyinternal
    environment:
      # this needs to match the hostname defined in the lemmy service
      - LEMMY_UI_LEMMY_INTERNAL_HOST=lemmy:8536
      # set the outside hostname here
      - LEMMY_UI_LEMMY_EXTERNAL_HOST=${LEMMY_UI_LEMMY_EXTERNAL_HOST:?Please create a .env file from .env.template}
      - LEMMY_HTTPS
    depends_on:
      - lemmy
    restart: unless-stopped

  pictrs-init:
    image: debian:12
    container_name: pictrs-init
    restart: "no"
    entrypoint: ["/bin/sh", "-c", "chown 991:991 /mnt"]
    volumes:
      - ./volumes/pictrs:/mnt:Z

  pictrs:
    image: asonix/pictrs:0.4.0-beta.19
    container_name: pictrs
    # this needs to match the pictrs url in lemmy.hjson
    hostname: pictrs
    # we can set options to pictrs like this, here we set max. image size and forced format for conversion
    # entrypoint: /sbin/tini -- /usr/local/bin/pict-rs -p /mnt -m 4 --image-format webp
    networks:
      - lemmyinternal
    environment:
      - PICTRS_OPENTELEMETRY_URL
      - PICTRS__SERVER__API_KEY
      - RUST_BACKTRACE=full
      - PICTRS__MEDIA__VIDEO_CODEC=vp9
      - PICTRS__MEDIA__GIF__MAX_WIDTH=256
      - PICTRS__MEDIA__GIF__MAX_HEIGHT=256
      - PICTRS__MEDIA__GIF__MAX_AREA=65536
      - PICTRS__MEDIA__GIF__MAX_FRAME_COUNT=400
    volumes:
      - ./volumes/pictrs:/mnt:Z
    restart: unless-stopped
    depends_on:
      pictrs-init:
        condition: service_completed_successfully

  postgres:
    image: postgres:15
    container_name: postgres
    # this needs to match the database host in lemmy.hson
    # Tune your settings via
    # https://pgtune.leopard.in.ua/#/
    # You can use this technique to add them here
    # https://stackoverflow.com/a/30850095/1655478
    hostname: postgres
    command:
      [
        "postgres",
        "-c",
        "session_preload_libraries=auto_explain",
        "-c",
        "auto_explain.log_min_duration=5ms",
        "-c",
        "auto_explain.log_analyze=true",
        "-c",
        "track_activity_query_size=1048576",
      ]
    networks:
      - lemmyinternal
      # adding the external facing network to allow direct db access for devs
      - lemmyexternalproxy
    ports:
      # use a different port so it doesnt conflict with potential postgres db running on the host
      - "127.0.0.1:5433:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_SUPERUSER_USER}
      - POSTGRES_PASSWORD=${POSTGRES_SUPERUSER_PASSWORD}
      - POSTGRES_DB=${POSTGRES_SUPERUSER_DATABASE}
      - POSTGRES_UNPRIVILEGED_USER
      - POSTGRES_UNPRIVILEGED_DATABASE
      - POSTGRES_UNPRIVILEGED_PASSWORD
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data:Z
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname=postgresql://${POSTGRES_UNPRIVILEGED_USER}:${POSTGRES_UNPRIVILEGED_PASSWORD}@localhost/${POSTGRES_UNPRIVILEGED_DATABASE}"]
      interval: 5s
      timeout: 1s
      retries: 30
